package br.gov.caixa.siiac.bo.impl;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import br.gov.caixa.exceptions.DAOException;
import br.gov.caixa.siiac.bo.IGarantiaBO;
import br.gov.caixa.siiac.bo.IMatrizAbrangenciaBO;
import br.gov.caixa.siiac.bo.ITrilhaHistoricoBO;
import br.gov.caixa.siiac.controller.security.SegurancaUsuario;
import br.gov.caixa.siiac.exception.SIIACException;
import br.gov.caixa.siiac.model.domain.Contrato;
import br.gov.caixa.siiac.model.domain.Garantia;
import br.gov.caixa.siiac.model.domain.TrilhaHistorico;
import br.gov.caixa.siiac.persistence.dao.IGarantiaDAO;

@Service
public class GarantiaBO implements IGarantiaBO {
	
	private IGarantiaDAO garantiaDAO;
	private ITrilhaHistoricoBO trilhaBO;
	private IMatrizAbrangenciaBO matrizAbrangenciaBO;
	
	@Transactional
	public List<Garantia> getListFiltro(Garantia garantia, Boolean inclusiveExcluida, BigDecimal[] valor) {
		String matricula = SegurancaUsuario.getInstance().getUsuario().getMatricula();
		Short nuUnidade = SegurancaUsuario.getInstance().getUsuario().getUnidade();
		Short perfilUsuario = SegurancaUsuario.getInstance().getUsuario().getPerfis().get(0);
		List<String> listCoProdutoAbrangencia = matrizAbrangenciaBO.getListAbrangenciaProduto(matricula, perfilUsuario);
		List<Short> listUnidadesAbrangencia = matrizAbrangenciaBO.getListAbrangenciaUnidades(perfilUsuario, nuUnidade);

		List<Garantia> list = garantiaDAO.getListFiltro(garantia, inclusiveExcluida, valor, listUnidadesAbrangencia, listCoProdutoAbrangencia);
		return list;
	}
	
	@Transactional
	public List<Garantia> getListFiltroSimples(String pesquisaString, Boolean pesquisaMostraInativos) {
		String matricula = SegurancaUsuario.getInstance().getUsuario().getMatricula();
		Short nuUnidade = SegurancaUsuario.getInstance().getUsuario().getUnidade();
		Short perfilUsuario = SegurancaUsuario.getInstance().getUsuario().getPerfis().get(0);
		List<String> listCoProdutoAbrangencia = matrizAbrangenciaBO.getListAbrangenciaProduto(matricula, perfilUsuario);
		List<Short> listUnidadesAbrangencia = matrizAbrangenciaBO.getListAbrangenciaUnidades(perfilUsuario, nuUnidade);

		List<Garantia> list = garantiaDAO.getListFiltroSimples(pesquisaString, pesquisaMostraInativos,  listUnidadesAbrangencia, listCoProdutoAbrangencia);
		return list;
	}
	
	@Transactional
	public Garantia save(Garantia garantia) {
		return garantiaDAO.merge(garantia);
	}
	
	@Transactional
	public void inativar(Garantia garantia) {
		garantia.setIcAtivo(false);
		garantiaDAO.inativar(garantia);
	}
	
	@Autowired
	public void setGarantiaDAO(IGarantiaDAO garantiaDAO) {
		this.garantiaDAO = garantiaDAO;
	}
	
	@Autowired
	public void setTrihaHistorico(ITrilhaHistoricoBO trilhaHistoricoBO) {
		this.trilhaBO = trilhaHistoricoBO;
	}
	
	@Autowired
	public void setMatrizAbrangenciaBO(IMatrizAbrangenciaBO matrizAbrangenciaBO) {
		this.matrizAbrangenciaBO = matrizAbrangenciaBO;
	}

	@Transactional
	public boolean existGarantia(Integer coGarantia, Integer nuGarantia) {
		return garantiaDAO.existGarantia(coGarantia, nuGarantia);
	}
	

	@Transactional
	public void addTrilhaGarantia(char acao, Garantia garantia, String strIP, Garantia garantiaOld) throws SIIACException {
		TrilhaHistorico trilhaHistorico = new TrilhaHistorico();
		trilhaHistorico.setNuGarantia(garantia.getNuGarantia());
		trilhaHistorico.setTsAcao(new Date());
		trilhaHistorico.setIcAcao(acao);
		trilhaHistorico.setCoResponsavelAcao(SegurancaUsuario.getInstance().getUsuario().getMatricula());
		trilhaHistorico.setNuIpResponsavelAcao(strIP);
		trilhaHistorico.setDeCamposAlterados("");
		
		if (acao == 'I') {
			trilhaHistorico.setNoAcao("Cadastro de Garantia");
		}
		if (acao == 'A') {
			trilhaHistorico.setNoAcao("Alteração de Garantia");
			trilhaHistorico.setDeCamposAlterados(getValoresAlterados(garantia, garantiaOld));
		}
		if (acao == 'E') {
			trilhaHistorico.setNoAcao("Exclusão de Garantia");
		}
		trilhaBO.save(trilhaHistorico);
	}
	
	/**
	 * Identifica os campos alterados e gera uma string informando o campo e valor alterado para gravar no log de auditoria
	 * @param garantia
	 * @param garantiaOld
	 * @return
	 */
	private String getValoresAlterados(Garantia garantia, Garantia garantiaOld) {
		String deCamposAlterados = "";
		if (!garantiaOld.getTipoGarantia().getNuTipoGarantia().equals(garantia.getTipoGarantia().getNuTipoGarantia())) {
			deCamposAlterados += "[TipoGarantia= " + garantiaOld.getTipoGarantia().getNoTipoGarantia() + "] ";
		}
		if (garantiaOld.getVrGarantia().doubleValue() != garantia.getVrGarantia().doubleValue()) {
			deCamposAlterados += "[VrGarantia= " + truncaValor(garantiaOld.getVrGarantia()) + "] ";
		}
		if(garantiaOld.getIcUltimaLocalizacao() != null && garantia.getIcUltimaLocalizacao() != null) {
			if (!garantiaOld.getIcUltimaLocalizacao().trim().equals(garantia.getIcUltimaLocalizacao().trim())) {
				deCamposAlterados += "[IcUltimaLocalizacao= " + garantiaOld.getIcUltimaLocalizacao() + "] ";
			}
		}
		if(garantiaOld.getDtUltimaLocalizacao() != null) {
			if (!garantiaOld.getDtUltimaLocalizacao().equals(garantia.getDtUltimaLocalizacao())) {
				deCamposAlterados += "[DtUltimaLocalizacao= " + new SimpleDateFormat("dd-MM-yy").format(garantiaOld.getDtUltimaLocalizacao()) + "] ";
			}
		}
		if (!garantiaOld.getCoUsuarioSolicitante().trim().equals(garantia.getCoUsuarioSolicitante().trim())) {
			deCamposAlterados += "[CoUsuarioSolicitante= " + garantiaOld.getCoUsuarioSolicitante() + "] ";
		}
		if (!garantiaOld.getDeGarantia().trim().equals(garantia.getDeGarantia().trim())) {
			deCamposAlterados += "[DeGarantia= " + garantiaOld.getDeGarantia() + "] ";
		}
		return deCamposAlterados;
	}
	
	/**
	 * Trunca valor para duas casas decimais.
	 * @param valor
	 * @return valor truncado no formato String
	 */
	private String truncaValor(BigDecimal valor) {
		DecimalFormat df = new DecimalFormat();
		df.setMaximumFractionDigits(2);
		return df.format(valor.doubleValue());
	}
	
	@Transactional
	public List<Garantia> getAllGarantiasInContrato(Contrato contrato) throws DAOException {
		return garantiaDAO.getAllGarantiasInContrato(contrato);
	}
}